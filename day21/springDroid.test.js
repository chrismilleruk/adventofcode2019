const { SpringDroid } = require('./springDroid');
const filename = __dirname + '/input.txt';

describe('Spring Droid', () => {
  // ???.
  const program1 = `
  NOT D J
  `;
  test('program 1 jumps into a hole `#.#`.', async () => {
    const springDroid = new SpringDroid(filename);
    await springDroid.loadSpringScript(program1);
    await springDroid.walk();

    expect(springDroid.result).toBe(10);
    expect(springDroid.lastMoments).toBe(`
Walking...


Didn't make it across:

.................
.................
@................
#####.###########

.................
.................
.@...............
#####.###########

.................
..@..............
.................
#####.###########

...@.............
.................
.................
#####.###########

.................
....@............
.................
#####.###########

.................
.................
.....@...........
#####.###########

.................
.................
.................
#####@###########

`);
  })
  // ???#
  const program2 = `
  AND D J
  `;
  test('program 2 walks into a hole `#.#`.', async () => {
    const springDroid = new SpringDroid(filename);
    await springDroid.loadSpringScript(program2);
    await springDroid.walk();

    expect(springDroid.result).toBe(10);
    expect(springDroid.lastMoments).toBe(`
Walking...


Didn't make it across:

.................
.................
@................
#####.###########

.................
.................
.@...............
#####.###########

.................
.................
..@..............
#####.###########

.................
.................
...@.............
#####.###########

.................
.................
....@............
#####.###########

.................
.................
.................
#####@###########

`);
  })
  // .??#
  const program3 = `
  AND D J
  NOT A J
  `;
  test('program 3 jumps hole `#.#`, but falls into a `#..#.#`', async () => {
    const springDroid = new SpringDroid(filename);
    await springDroid.loadSpringScript(program3);
    await springDroid.walk();

    expect(springDroid.result).toBe(10);
    expect(springDroid.lastMoments).toBe(`
Walking...


Didn't make it across:

.................
.................
@................
#####..#.########

.................
.................
.@...............
#####..#.########

.................
.................
..@..............
#####..#.########

.................
.................
...@.............
#####..#.########

.................
.................
....@............
#####..#.########

.................
.....@...........
.................
#####..#.########

......@..........
.................
.................
#####..#.########

.................
.......@.........
.................
#####..#.########

.................
.................
........@........
#####..#.########

.................
.................
.................
#####..#@########

`);
  })
  // ?.?#
  const program4 = `
  AND D J
  NOT B J
  `;
  test('program 4 jumps `#.#` && `#..#.#`, but falls into a `##...#`', async () => {
    const springDroid = new SpringDroid(filename);
    await springDroid.loadSpringScript(program4);
    await springDroid.walk();

    expect(springDroid.result).toBe(10);
    expect(springDroid.lastMoments).toBe(`
Walking...


Didn't make it across:

.................
.................
@................
#####...#########

.................
.................
.@...............
#####...#########

.................
.................
..@..............
#####...#########

.................
.................
...@.............
#####...#########

.................
....@............
.................
#####...#########

.....@...........
.................
.................
#####...#########

.................
......@..........
.................
#####...#########

.................
.................
.......@.........
#####...#########

.................
.................
.................
#####..@#########

`);
  })

  // ??.#
  const program5 = `
  NOT C T
  OR T J
  AND D J
  `;
  test('program 5 jumps `###.#`, `##..#`, `#...#`, but falls into a `#.###` (e.g. `##..#.#`)', async () => {
    const springDroid = new SpringDroid(filename);
    await springDroid.loadSpringScript(program5);
    await springDroid.walk();

    expect(springDroid.result).toBe(10);
    expect(springDroid.lastMoments).toBe(`
Walking...


Didn't make it across:

.................
.................
@................
#####..#.########

.................
.................
.@...............
#####..#.########

.................
.................
..@..............
#####..#.########

.................
.................
...@.............
#####..#.########

.................
....@............
.................
#####..#.########

.....@...........
.................
.................
#####..#.########

.................
......@..........
.................
#####..#.########

.................
.................
.......@.........
#####..#.########

.................
.................
.................
#####..#@########

`);
  })

  // ??.#
  // .??#
  const program6 = `
  NOT C T
  OR T J
  NOT A T
  OR T J
  AND D J
  `;
  test('program 6 completes.', async () => {
    const springDroid = new SpringDroid(filename);
    await springDroid.loadSpringScript(program6);
    await springDroid.walk();

    expect(springDroid.result).toBe(19360288);
  })

  const example1 = `
  NOT A J
  NOT B T
  AND T J
  NOT C T
  AND T J
  AND D J
  `;
  test.skip('example 1 jumps if a three-tile-wide hole (with ground on the other side of the hole) is detected.', async () => {
    const springDroid = new SpringDroid(filename);
    await springDroid.loadSpringScript(example1);
    await springDroid.walk();

    // Unclear how to test this with the inputfile given.
    expect(springDroid.result).toBe(10);
    expect(springDroid.lastMoments).toBe(`
Walking...


Didn't make it across:

.................
.................
@................
#####.###########

.................
.................
.@...............
#####.###########

.................
.................
..@..............
#####.###########

.................
.................
...@.............
#####.###########

.................
.................
....@............
#####.###########

.................
.................
.................
#####@###########

`);
  });
  
})